#version 440

#define EPS 0.001

uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;
uniform float aliveCount;
uniform float crazy;
uniform sampler2DRect aaa;

struct Particle{
	vec4 pos;
	vec4 vel;
	vec4 acc;
	vec4 drg;
};

layout(std140, binding=0) buffer particles{
	Particle p[];
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

/* skew constants for 3d simplex functions */
const float F3 =  0.3333333;
const float G3 =  0.1666667;

/* 3d simplex noise */
float simplex3d(vec3 p) {
	 /* 1. find current tetrahedron T and it's four vertices */
	 /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	 /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/
	 
	 /* calculate s and x */
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));
	 
	 /* calculate i1 and i2 */
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);
	 	
	 /* x1, x2, x3 */
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;
	 
	 /* 2. find four surflets and store them in d */
	 vec4 w, d;
	 
	 /* calculate surflet weights */
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 
	 /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	 w = max(0.6 - w, 0.0);
	 
	 /* calculate surflet components */
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 
	 /* multiply d by w^4 */
	 w *= w;
	 w *= w;
	 d *= w;
	 
	 /* 3. return the sum of the four surflets */
	 return dot(d, vec4(52.0));
}

/* const matrices for 3d rotation */
const mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);
const mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);
const mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);

/* directional artifacts can be reduced by rotating each octave */
float simplex3d_fractal(vec3 m) {
    return   0.5333333*simplex3d(m*rot1)
			+0.2666667*simplex3d(2.0*m*rot2)
			+0.1333333*simplex3d(4.0*m*rot3)
			+0.0666667*simplex3d(8.0*m);
}


float power(float p, float g) {
    if (p < 0.5)
        return 0.5 * pow(2*p, g);
    else
        return 1 - 0.5 * pow(2*(1 - p), g);
}


void main(){
	uint gid = gl_GlobalInvocationID.x;
    
	return;

	float drag = p[gid].drg.x;
    
    vec2 pos = p[gid].pos.xy;

	vec2 tomouse = mouse - pos;

    if(length(tomouse) > 244){
        tomouse *= 0;
    }
    else{
	    tomouse = tomouse / (length(tomouse) + .1);
    }

    float mouseforce = 1.0;
	
	float tttime = time*0.015 + pos.x/resolution.x;
	tttime = mod(tttime, 1.0);
	tttime = pow(tttime, 5);
	float ttime = floor(time) + tttime;
	
	vec2 posss = pos.xy/resolution.xy;
	vec3 nzpp = vec3(posss.x, posss.y, ttime*0.002);
	float incx = clamp(4 + round(power(simplex3d(nzpp+vec3(0.2589, 0.4891, 1.131)), 4)*16), 5, 16);
	float incy = clamp(4 + round(power(simplex3d(nzpp+vec3(3.2589, 0.4891, 44.131)), 4)*16), 5, 16);

	vec2 poss = pos.xy/resolution.xy;
	poss.x = round(incx*poss.x)/incx;
	poss.y = round(incy*poss.y)/incy;
	vec3 nzp = vec3(poss.x, poss.y, ttime*0.002)*2;
    float radius = 200 + 110*simplex3d_fractal(nzp+vec3(0.2589, 0.4891, 1.131)*float(gid));

    if(length(mouse - pos) < radius)
        mouseforce = 0.0;

    vec2 noisexy = vec2(0, 0);
	float qq = simplex3d(nzp*0.01+vec3(0.2589, 0.4891, 5.1311));
    float ang = 66*simplex3d(nzp*.527*qq + time*0.02 + float(gid*0));
    float ang2 = 0*simplex3d(nzp*.637 + time*0.001 + .1*float(gid*1));

    float r = .6;
    //noisexy.x = r*cos(ang)*crazy + (1-crazy)*simplex3d(nzp)*tttime*5.4;
    //noisexy.y = r*sin(ang)*crazy + (1-crazy)*simplex3d(nzp+.5)*tttime*1.6;

	//float aa = atan(noisexy.y, noisexy.x);
	//float dd = length(noisexy.xy);
	//aa = round(aa/(3.14159/4))*(3.14159/2);
	//noisexy.x = dd*cos(aa);
	//noisexy.y = dd*sin(aa);

    //noisexy.x = simplex3d(nzp);
    //noisexy.y = simplex3d(nzp+.5);
    
    //noisexy.x = r*cos(ang+ang2);
    //noisexy.y = r*sin(ang+ang2);

	//p[gid].acc.xy = mouseforce*tomouse + 0.95*noisexy;
	//p[gid].acc.xy = 1127.5*noisexy.xy;
	//p[gid].acc.xy = -strength/(d+EPS)*dir;

    //vec4 texcolor = texture(aaa, p[gid].pos.xy + vec2(0.));

    //vec2 cc = texcolor.xy;
    //if(texcolor.x+texcolor.y > 0.5){
    //    cc -= vec2(.5);
    //    cc = cc/length(cc);
    //    cc.y *= -1;
    //}
    //else{
    //    cc *= 0;
    //}
    //p[gid].acc.xy *= 0;
    //if(noise(vec2(float(gid)+time, float(gid)+time), 1.) < 0.5){
        //p[gid].acc.xy += cc*7;
    //}
	//p[gid].acc.xy += cc*17;
    //p[gid].acc.xy += 47*noisexy;
    //p[gid].acc.xy += -40*tomouse;

	//p[gid].acc.xy += 5*vec2(0., 1.)*float(gid)/float(aliveCount);
    
    if(p[gid].drg.y > aliveCount){
       // vec2 vv = vec2(0*noise(4*pos+vec2(0.855589, 0.14891)*float(gid), 0.129), 20*noise(4*pos+vec2(0.855589, 0.14891)*float(gid)+3141.41, 0.329));
        //p[gid].pos.xy = mouse.xy + vv;
        //p[gid].acc.xy *= 0;
    }

    //p[gid].acc.xy += vec2(0,7);

    /*if(p[gid].pos.x > resolution.x-160.)
        p[gid].acc.xy += vec2(-1., 0.)*13;
    if(p[gid].pos.y > resolution.y-160.)
        p[gid].acc.xy += vec2(0., -1.)*13;
    if(p[gid].pos.x < 160.)
        p[gid].acc.xy += vec2(1., 0.)*13;
    if(p[gid].pos.y < 160.)
        p[gid].acc.xy += vec2(0., 1.)*13;*/

    
    if(p[gid].pos.x >= resolution.x)
        p[gid].pos.x = 0.0;
    if(p[gid].pos.y >= resolution.y)
        p[gid].pos.y = 0.0;
    if(p[gid].pos.x < 0.0)
        p[gid].pos.x = resolution.x-1.;
    if(p[gid].pos.y < 0.0)
        p[gid].pos.y = resolution.y-1.;

	//p[gid].vel.xy += p[gid].acc.xy*0.05;
	//p[gid].vel.xy *= (drag + 1.)/2.;
    
	//p[gid].pos.xy += p[gid].vel.xy;
    
    p[gid].drg.zw = p[gid].vel.xy;
}