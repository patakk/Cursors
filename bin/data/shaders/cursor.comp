#version 440

#define EPS 0.001

uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;
uniform float aliveCount;
uniform sampler2DRect aaa;

struct Particle{
	vec4 pos;
	vec4 vel;
	vec4 acc;
	vec4 drg;
};

layout(std140, binding=0) buffer particles{
	Particle p[];
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

float unity_noise_randomValue (vec2 uv)
{
    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);
}

 float unity_noise_interpolate (float a, float b, float t)
{
    return (1.0-t)*a + (t*b);
}

float unity_valueNoise (vec2 uv)
{
    vec2 i = floor(uv);
    vec2 f = fract(uv);
    f = f * f * (3.0 - 2.0 * f);

    uv = abs(fract(uv) - 0.5);
    vec2 c0 = i + vec2(0.0, 0.0);
    vec2 c1 = i + vec2(1.0, 0.0);
    vec2 c2 = i + vec2(0.0, 1.0);
    vec2 c3 = i + vec2(1.0, 1.0);
    float r0 = unity_noise_randomValue(c0);
    float r1 = unity_noise_randomValue(c1);
    float r2 = unity_noise_randomValue(c2);
    float r3 = unity_noise_randomValue(c3);

    float bottomOfGrid = unity_noise_interpolate(r0, r1, f.x);
    float topOfGrid = unity_noise_interpolate(r2, r3, f.x);
    float t = unity_noise_interpolate(bottomOfGrid, topOfGrid, f.y);
    return t;
}

float noise(vec2 UV, float Scale)
{
    float t = 0.0;

    float freq = pow(2.0, float(0));
    float amp = pow(0.5, float(3-0));
    t += unity_valueNoise(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

    freq = pow(2.0, float(1));
    amp = pow(0.5, float(3-1));
    t += unity_valueNoise(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

    freq = pow(2.0, float(2));
    amp = pow(0.5, float(3-2));
    t += unity_valueNoise(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

    return 2*t-1;
}

void main(){
	uint gid = gl_GlobalInvocationID.x;
    

	float drag = p[gid].drg.x;
    
    vec2 pos = p[gid].pos.xy;

	vec2 tomouse = mouse - pos;
	tomouse = tomouse / (length(tomouse) + .1);


    float mouseforce = 1.0;

    float radius = 200 + 110*noise(pos+vec2(0.2589, 0.4891)*float(gid), 0.029);

    if(length(mouse - pos) < radius)
        mouseforce = 0.0;

    vec2 noisexy = vec2(0, 0);
    noisexy.x = noise(pos + time*2.01 + float(gid), 0.02);
    noisexy.y = noise(pos + time*2.01 + 20*vec2(0.589, 0.1891)*float(gid), 0.02);
    
	//p[gid].acc.xy = mouseforce*tomouse + 0.95*noisexy;
	p[gid].acc.xy = 0.95*noisexy;
	//p[gid].acc.xy = -strength/(d+EPS)*dir;

    vec4 texcolor = texture(aaa, pos/resolution);

    p[gid].acc.xy *= 1 - 0*texcolor.r;

	p[gid].vel.xy += p[gid].acc.xy*0.15;
	p[gid].vel.xy *= drag.x;

	p[gid].pos.xy += p[gid].vel.xy;
    
    if(p[gid].pos.x > resolution.x)
        p[gid].pos.x = 0;
    if(p[gid].pos.y > resolution.y)
        p[gid].pos.y = 0;
    if(p[gid].pos.x < 0)
        p[gid].pos.x = resolution.x;
    if(p[gid].pos.y < 0)
        p[gid].pos.y = resolution.y;

    if(p[gid].drg.y > aliveCount)
        p[gid].pos.xy = mouse.xy;
}